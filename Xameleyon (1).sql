-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Май 27 2024 г., 09:45
-- Версия сервера: 5.7.39
-- Версия PHP: 8.1.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `Xameleyon`
--

-- --------------------------------------------------------

--
-- Структура таблицы `courses`
--

CREATE TABLE `courses` (
  `id` int(11) NOT NULL,
  `img` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `price` float NOT NULL,
  `specialist` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `miniDiscription` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `slogan` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `discription` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `telegLink` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `releaseCourse` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `courses`
--

INSERT INTO `courses` (`id`, `img`, `name`, `price`, `specialist`, `miniDiscription`, `slogan`, `discription`, `telegLink`, `releaseCourse`) VALUES
(25, '664dee98acdb6.jpg', 'Android & Kotlin программирование', 2500000, 'Android разработчик', 'Целый мир в вашем кармане. Разрабатывайте приложения для Android с Kotlin.', 'СТАНЬТЕ АРХИТЕКТОРОМ В МИРЕ ANDROID', 'профессиональный программист, который специализируется на разработке приложений для платформы Android. Он или она создает программные продукты, такие как игры, productivity-приложения, фитнес-трекеры, финансовые приложения и другие, которые выполняют конкретные задачи и функции.', 'https://t.me/AZIZ_006', 1),
(26, '664df11c0ac0e.jpg', 'Кибербезопасность', 3000000, 'Специалист по безопасности', 'Защитите мир от киберугроз! Станьте экспертом в области пентестинга и обеспечьте безопасность сетей.', 'СТАНЬТЕ ЩИТОМ В\r\nМИРЕ DIGITAL ДАННЫХ', 'профессиональный программист, который специализируется на обеспечении безопасности информационных систем, сетей и приложений. В области Android-разработки Специалист по безопасности занимается следующими задачами: анализ уязвимостей, тестирование безопасности, обеспечение конфиденциальности данных и многое другое...', 'https://t.me/AZIZ_006', 1),
(27, '664df1c693433.jpg', 'PM – Управление проектами', 2000000, 'Проект-менеджеры', 'Превратите идеи в успешные проекты. Откройте для себя секреты эффективного менеджмента с нашим курсом!', 'НАУЧИМ УПРАВЛЯТЬ IT-ПРОЕКТАМИ', 'Менеджер проекта гарантирует своевременное и качественное выполнение проекта, создавая эффективные каналы связи в команде. Он создает комфорт для специалистов, раскрывая их потенциал, и использует методы как Agile и Scrum, работая в Jira.', 'https://t.me/AZIZ_006', 1),
(28, '664df2e9e444b.jpg', 'Full Stack Java', 1500000, 'Java Full Stack Разработчик', 'Пройдите путь от новичка до профессионала с нашим курсом. Реальные проекты, глубокие знания и ваш успех в мире Java!', 'СТАНЬТЕ FULL STACK JAVA РАЗРАБОТЧИКОМ С НУЛЯ', 'занимается созданием веб-приложений, обладающих как клиентской, так и серверной частью. Он работает как с фронтендом (то есть пользовательским интерфейсом), так и с бэкендом (серверной частью приложения).', 'https://t.me/AZIZ_006', 1),
(29, '664df3ede6d38.jpg', 'Node.js практикум', 2500000, 'NODE.JS BACKEND РАЗРАБОТЧИК', 'Завоюйте веб-пространство с Node.js! Прокачайте свои навыки и создавайте сложные веб-приложения с нашим экспертным руководством.', 'NODE.JS ВАШ СТАРТ В BACKEND РАЗРАБОТКЕ', 'специализируется на создании серверной части веб-приложений с использованием платформы Node.js. Основные обязанности и задачи такого разработчика включают: создание серверной логики, работа с базами данных, интеграция с внешними сервисами, разработка и тестирование API, обеспечение безопасности и многое другое...\r\n\r\n', 'https://t.me/AZIZ_006', 1),
(30, '664df5705169c.jpg', 'Full Stack Python', 2500000, 'Python разработчик', 'Гибкость и мощь Python. Разработка от сервера до пользовательского интерфейса.', 'ПОМОЖЕМ ОСВОИТЬ PYTHON И DJANGO С НУЛЯ!', 'занимается созданием и поддержкой программного обеспечения с использованием языка программирования Python. Его обязанности могут варьироваться в зависимости от области специализации и типа проектов. Основные направления деятельности Python разработчика включают: веб-разработка, анализ данных и наука о данных, автоматизация и скриптинг, разработка и поддержка API, разработка игр и многое другое...', 'https://t.me/AZIZ_006', 1),
(31, '664df623657d9.jpg', 'Frontend разработка', 2000000, 'Frontend разработчик', 'Научим созданию динамичных и красочных интерфейсов.', 'БУДЬТЕ НА ФРОНТАХ\r\nСВОЕЙ IT КАРЬЕРЫ', 'специализируется на создании пользовательского интерфейса (UI) и улучшении взаимодействия пользователей с веб-приложениями. Его основная задача — разработка визуальной и интерактивной части веб-сайтов и веб-приложений.', 'https://t.me/AZIZ_006', 1),
(32, '664df70f12151.jpg', 'iOS & Swift программирование', 1500000, 'iOS & Swift разработчик', 'Элегантные приложения для Apple. Разработка на Swift для iOS.', 'НАУЧИМ СОЗДАВАТЬ\r\niOS ПРИЛОЖЕНИЯ', 'занимается созданием, поддержкой и обновлением приложений для мобильных устройств на базе операционной системы iOS, используя язык программирования Swift. Основные обязанности и задачи iOS & Swift разработчика включают: разработка приложений для iOS, работа с фреймворками и библиотеками iOS, обеспечение безопасности приложений и многое другое...', 'https://t.me/AZIZ_006', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `direction`
--

CREATE TABLE `direction` (
  `id` int(11) NOT NULL,
  `idTeacher` int(11) NOT NULL,
  `idCours` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `direction`
--

INSERT INTO `direction` (`id`, `idTeacher`, `idCours`) VALUES
(27, 9, 25),
(39, 9, 32),
(29, 10, 26),
(38, 10, 32),
(36, 11, 26),
(30, 11, 28),
(31, 11, 29),
(32, 14, 27),
(8, 14, 32),
(34, 15, 30),
(33, 15, 31),
(19, 16, 29),
(35, 16, 31);

-- --------------------------------------------------------

--
-- Структура таблицы `feedbackFrom`
--

CREATE TABLE `feedbackFrom` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `telNumber` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `feedbackFrom`
--

INSERT INTO `feedbackFrom` (`id`, `name`, `telNumber`) VALUES
(7, 'klkln', '+12321321312'),
(8, 'zzz', '+7 (924) 234-23-43');

-- --------------------------------------------------------

--
-- Структура таблицы `gradeStudents`
--

CREATE TABLE `gradeStudents` (
  `id` int(11) NOT NULL,
  `idStudent` int(11) NOT NULL,
  `idLesson` int(11) NOT NULL,
  `status` tinyint(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `gradeStudents`
--

INSERT INTO `gradeStudents` (`id`, `idStudent`, `idLesson`, `status`) VALUES
(3, 4, 7, 1),
(5, 4, 9, 0),
(6, 4, 10, 0),
(7, 4, 11, 0),
(8, 4, 12, 0),
(9, 4, 13, 0),
(10, 4, 14, 1),
(11, 4, 15, 0),
(12, 4, 16, 1),
(13, 4, 17, 1),
(14, 4, 18, 0),
(15, 4, 19, 0),
(16, 4, 20, 0),
(17, 4, 21, 0),
(18, 4, 22, 1),
(19, 4, 23, 1),
(20, 4, 24, 1),
(21, 4, 25, 0),
(22, 4, 26, 0),
(23, 4, 27, 0),
(24, 4, 28, 0),
(25, 4, 29, 0),
(26, 4, 30, 0),
(27, 4, 31, 0),
(28, 4, 32, 0),
(29, 4, 33, 0),
(30, 4, 34, 0),
(31, 4, 35, 0),
(32, 4, 36, 0),
(33, 4, 37, 0),
(34, 4, 38, 0),
(35, 4, 39, 0),
(36, 4, 40, 0),
(37, 4, 41, 0),
(38, 4, 42, 0),
(39, 4, 43, 1),
(40, 4, 44, 0),
(41, 4, 45, 1),
(42, 4, 12, 0),
(43, 4, 13, 0),
(44, 4, 14, 0),
(45, 4, 15, 0),
(46, 4, 16, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `lesson`
--

CREATE TABLE `lesson` (
  `id` int(11) NOT NULL,
  `idCours` int(11) NOT NULL,
  `idTheory` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `lesson`
--

INSERT INTO `lesson` (`id`, `idCours`, `idTheory`) VALUES
(7, 25, 45),
(9, 25, 47),
(10, 25, 48),
(11, 25, 49),
(12, 26, 50),
(13, 26, 51),
(14, 26, 52),
(15, 26, 53),
(16, 26, 54),
(17, 27, 55),
(18, 27, 56),
(19, 27, 57),
(20, 27, 58),
(21, 27, 59),
(22, 28, 60),
(23, 28, 61),
(24, 28, 62),
(25, 28, 63),
(26, 28, 64),
(27, 29, 65),
(28, 29, 66),
(29, 29, 67),
(30, 29, 68),
(31, 30, 69),
(32, 30, 70),
(33, 30, 71),
(34, 30, 72),
(35, 30, 73),
(36, 31, 74),
(37, 31, 75),
(38, 31, 76),
(39, 31, 77),
(40, 31, 78),
(41, 32, 79),
(42, 32, 80),
(43, 32, 81),
(44, 32, 82),
(45, 32, 83);

-- --------------------------------------------------------

--
-- Структура таблицы `personalCourses`
--

CREATE TABLE `personalCourses` (
  `id` int(11) NOT NULL,
  `idUser` int(11) NOT NULL,
  `idCours` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `personalCourses`
--

INSERT INTO `personalCourses` (`id`, `idUser`, `idCours`) VALUES
(1, 4, 25),
(9, 4, 26),
(3, 4, 27),
(4, 4, 28),
(5, 4, 29),
(6, 4, 30),
(7, 4, 31),
(8, 4, 32);

-- --------------------------------------------------------

--
-- Структура таблицы `profession`
--

CREATE TABLE `profession` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `idUser` int(11) NOT NULL,
  `img` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `profession`
--

INSERT INTO `profession` (`id`, `name`, `idUser`, `img`) VALUES
(5, 'Fullstack Web developer', 9, 'teacher-1_work.png'),
(6, 'Mentor', 10, 'teacher-3_work.png'),
(7, 'Senior Mobile Developer', 11, 'teacher-4_work.png'),
(8, 'Senior Backend Developer\r\n', 14, 'teacher-5_work.png'),
(9, 'Android Developer', 16, 'teacher-6_work.png'),
(10, 'Middle Developer', 15, 'teacher-1_work.png');

-- --------------------------------------------------------

--
-- Структура таблицы `salaryCourse`
--

CREATE TABLE `salaryCourse` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `salary` int(255) NOT NULL,
  `idCours` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `salaryCourse`
--

INSERT INTO `salaryCourse` (`id`, `name`, `salary`, `idCours`) VALUES
(49, 'Junior', 400, 25),
(50, 'Middle', 1480, 25),
(51, 'Senior', 3510, 25),
(52, 'Junior', 600, 26),
(53, 'Middle', 1500, 26),
(54, 'Senior', 2500, 26),
(55, 'Junior', 681, 27),
(56, 'Middle', 2045, 27),
(57, 'Senior', 3416, 27),
(58, 'Junior', 350, 28),
(59, 'Middle', 1230, 28),
(60, 'Senior', 3530, 28),
(61, 'Junior', 600, 29),
(62, 'Middle', 1125, 29),
(63, 'Senior', 2875, 29),
(64, 'Junior', 600, 30),
(65, 'Middle', 1314, 30),
(66, 'Senior', 3367, 30),
(67, 'Junior', 312, 31),
(68, 'Middle', 1350, 31),
(69, 'Senior', 2800, 31),
(70, 'Junior', 312, 32),
(71, 'Middle', 1724, 32),
(72, 'Senior', 2710, 32);

-- --------------------------------------------------------

--
-- Структура таблицы `theory`
--

CREATE TABLE `theory` (
  `id` int(11) NOT NULL,
  `media` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `text` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `mediaType` varchar(8) COLLATE utf8mb4_unicode_ci DEFAULT 'img'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `theory`
--

INSERT INTO `theory` (`id`, `media`, `name`, `text`, `mediaType`) VALUES
(8, 'defult.jpg', 'asdasd', 'sadasd', 'img'),
(17, 'fon.jpg', 'vvv', 'vvv', 'img'),
(18, 'teacher-1.jpg', 'bbbbbbbbb', 'bbbbbbbbb', 'img'),
(19, 'defult.jpg', 'jjjj', 'jjjj', 'img'),
(20, 'learing-1.jpg', 'Первый урок', 'Большой текст', 'img'),
(21, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'asdasd', 'asdasd', 'img'),
(31, '664affaacec2d.mp4', 'sadasdasd', 'qwdqwd', 'video'),
(34, '664dc534a1ac2.mp4', 'Урок-1', 'фыв', 'video'),
(35, '664dc54151d8b.mp4', 'Урок-2', 'фыв', 'video'),
(36, '664dc54dda4c7.png', 'Урок-3', 'фыв', 'img'),
(37, '664dc55c3f745.jpg', 'Урок-4', 'фыв', 'img'),
(38, '664dc565d247c.png', 'Урок-5', 'фыв', 'img'),
(45, 'asd.mp4', 'Основы Swift', 'Swift - это современный язык программирования, разработанный компанией Apple для разработки приложений для iOS, macOS, watchOS и tvOS. В следующей теории мы рассмотрим основные концепции иfeatures Swift.\r\n\r\n1. Основные типы данных\r\n\r\nSwift имеет несколько основных типов данных, которые используются для хранения и работы с информацией:\r\n\r\nInt: целочисленный тип, представляющий целые числа.\r\nDouble: вещественный тип, представляющий вещественные числа.\r\nString: строковый тип, представляющий текст.\r\nBool: булев тип, представляющий логическое значение true или false.\r\nArray: тип массива, представляющий коллекцию элементов.\r\nDictionary: тип словаря, представляющий коллекцию пар ключ-значение.\r\n2. переменные и константы\r\n\r\nВ Swift переменные и константы объявляются с помощью ключевого слова var или let:\r\n\r\nvar - переменная, которая может быть изменена после объявления.\r\nlet - константа, которая не может быть изменена после объявления.\r\n', 'video'),
(47, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'UIKit', 'Теория на тему UIKit!\r\n\r\nUIKit - это фреймворк в операционных системах Apple iOS и macOS, который предоставляет набор готовых компонентов пользовательского интерфейса, таких как кнопки, надписи и текстовые поля. Он используется для создания пользовательских интерфейсов для приложений и позволяет разработчикам создавать пользовательские компоненты пользовательского интерфейса.\r\n\r\nВот теория по теме:\r\n\r\nТеория: \"Сила абстракции в UIKit\"\r\n\r\nТеория предполагает, что сила UIKit заключается в его способности абстрагироваться от сложности создания пользовательских интерфейсов, позволяя разработчикам сосредоточиться на логике и функциональности своего приложения, а не на тонкостях дизайна пользовательского интерфейса.\r\n\r\nКлючевые компоненты:\r\n\r\nИерархия представлений: Иерархия представлений является основой UIKit. Она позволяет разработчикам создавать древовидную структуру представлений, каждое из которых обладает своими свойствами и поведением.\r\nКонтроллеры представлений: Контроллеры представлений отвечают за управление иерархией представлений и обеспечение связи между представлением и моделью данных приложения.\r\nCore Animation: Core Animation - это мощный анимационный движок, который обеспечивает плавную и эффективную анимацию.\r\nУправление касаниями: UIKit предоставляет набор API для обработки событий касания, позволяя разработчикам создавать пользовательские жесты и поведение при касании.\r\nВыгоды:\r\n\r\nБолее быстрая разработка: Предоставляя набор готовых компонентов пользовательского интерфейса, UIKit позволяет разработчикам сосредоточиться на создании логики и функциональности приложения, а не тратить время на дизайн пользовательского интерфейса.\r\nУлучшенная производительность: Абстракция, предоставляемая UIKit, позволяет разработчикам оптимизировать производительность своего приложения, используя встроенные в фреймворк механизмы оптимизации.\r\nНастраиваемость: Несмотря на абстракцию, предоставляемую UIKit, разработчики по-прежнему могут настраивать внешний вид и поведение компонентов пользовательского интерфейса своего приложения в соответствии со своими конкретными потребностями.\r\nОграничения:\r\n\r\nВысокая скорость обучения: Несмотря на то, что UIKit предоставляет множество преимуществ, разработчикам также может быть сложно его изучать и осваивать.\r\nОграниченная гибкость: Хотя UIKit предоставляет множество возможностей для настройки, его гибкость и креативность могут быть ограничены.\r\nЗависимость от экосистемы Apple: UIKit тесно интегрирован с экосистемой Apple, что может затруднить разработку приложений, работающих на нескольких платформах.\r\nВывод:\r\n\r\nВ заключение, теория предполагает, что сила UIKit заключается в его способности абстрагироваться от сложности создания пользовательских интерфейсов, позволяя разработчикам сосредоточиться на логике и функциональности своего приложения. Несмотря на определенные ограничения в использовании UIKit, его преимущества делают его незаменимым инструментом для разработки высококачественных приложений для iOS и macOS.', 'img'),
(48, 'asd.mp4', 'Моё первое приложение', 'Создание первого приложения для iOS может быть увлекательным и полезным опытом. В этой теории мы рассмотрим основные шаги, необходимые для разработки простого приложения, а также некоторые важные концепции и инструменты, которые помогут вам на этом пути.\r\n\r\nОсновные этапы разработки приложения\r\nИдея и планирование\r\n\r\nОпределите цель вашего приложения. Что оно будет делать? Какие проблемы решать?\r\nСоставьте список функций и особенностей.\r\nНарисуйте простые макеты экранов, чтобы визуализировать пользовательский интерфейс (UI).\r\nВыбор инструментов и технологий\r\n\r\nУстановите Xcode, интегрированную среду разработки (IDE) от Apple.\r\nВыберите язык программирования: Swift (рекомендуется) или Objective-C.\r\nОзнакомьтесь с Human Interface Guidelines от Apple для создания удобного и интуитивно понятного интерфейса.\r\nСоздание проекта\r\n\r\nСоздайте новый проект в Xcode, выбрав шаблон Single View App.\r\nНастройте основные параметры проекта, такие как имя, идентификатор пакета и целевую версию iOS.\r\nРазработка пользовательского интерфейса (UI)\r\n\r\nИспользуйте Interface Builder в Xcode для создания интерфейса.\r\nДобавьте элементы интерфейса (кнопки, текстовые поля, метки и т.д.) на View Controller.\r\nНастройте автолейаут для обеспечения адаптивности интерфейса на разных устройствах.\r\nПрограммирование логики приложения\r\n\r\nСоздайте связи (outlets) между элементами интерфейса и кодом.\r\nНапишите обработчики событий (actions) для взаимодействия с пользователем.\r\nРеализуйте основную логику приложения с помощью Swift или Objective-C.\r\nТестирование и отладка\r\n\r\nТестируйте приложение на симуляторе в Xcode и на реальных устройствах.\r\nИспользуйте инструменты отладки, такие как логи и точки останова, для поиска и устранения ошибок.\r\nДеплой и распространение\r\n\r\nЗарегистрируйтесь в Apple Developer Program для получения доступа к App Store.\r\nПодготовьте иконку приложения и другие графические ресурсы.\r\nСоздайте описание и скриншоты для App Store.\r\nЗагрузите приложение в App Store Connect и отправьте его на проверку.\r\nОсновные концепции и инструменты\r\nMVC (Model-View-Controller)\r\n\r\nАрхитектурный шаблон, который помогает разделить логику приложения на три части: модель, представление и контроллер.\r\nStoryboard и Interface Builder\r\n\r\nИнструменты Xcode для визуального создания и настройки интерфейса приложения.\r\nAutolayout\r\n\r\nСистема, которая позволяет создавать адаптивные интерфейсы, поддерживающие разные размеры экранов и ориентации.\r\nCocoa Touch Framework\r\n\r\nНабор библиотек и фреймворков, предоставляемых Apple для разработки приложений под iOS.\r\nSwift Playgrounds\r\n\r\nИнтерактивная среда для изучения Swift, которая может быть полезна для новичков.\r\nЗаключение\r\nСоздание первого приложения для iOS требует некоторых усилий и времени, но является отличным способом познакомиться с основами мобильной разработки. Следуя этой теории и практическим шагам, вы сможете создать простое, но функциональное приложение, которым сможете гордиться. Главное – не бояться экспериментировать и учиться на своих ошибках. ', 'video'),
(49, 'asd.mp4', 'Приложение с погодой', '\"Моя Погода\" — это простое и удобное приложение для iOS, которое позволяет пользователям быстро и легко узнавать текущую погоду и прогноз на ближайшие дни в любом выбранном месте. Благодаря интуитивно понятному интерфейсу и точным данным,', 'video'),
(50, 'asd.mp4', 'Введение в Кибербезопасность', 'Кибербезопасность представляет собой практику защиты систем, сетей и программ от цифровых атак. Эти атаки обычно направлены на получение несанкционированного доступа, изменение или уничтожение информации, вымогательство денег у пользователей или прерывание нормального функционирования бизнеса. Основные принципы кибербезопасности включают в себя конфиденциальность, целостность и доступность данных.', 'video'),
(51, 'asd.mp4', 'Виды киберугроз и методы защиты', 'Киберугрозы могут быть различными: от вирусов и вредоносного ПО до фишинговых атак и DDoS-атак. Вредоносное ПО (malware) включает в себя вирусы, черви, трояны и шпионское ПО, которые могут повредить системы или похитить данные. Защита от этих угроз требует комплексного подхода: использования антивирусного ПО, сетевых фильтров, регулярного обновления систем и обучения пользователей основам безопасности.', 'video'),
(52, 'asd.mp4', 'Криптография и её роль в кибербезопасности', 'Криптография — это наука о шифровании информации, позволяющая обеспечить её конфиденциальность и целостность. Современная криптография использует различные алгоритмы шифрования, такие как AES, RSA и SHA, для защиты данных при передаче и хранении. Понимание основ криптографии и умение применять её методы являются важными навыками для специалистов по кибербезопасности.', 'video'),
(53, 'asd.mp4', 'Управление доступом и аутентификация', 'Управление доступом — это процесс контроля, кто и что может делать в системе. Аутентификация и авторизация являются ключевыми компонентами управления доступом. Аутентификация подтверждает личность пользователя (например, с помощью пароля, биометрии или двухфакторной аутентификации), тогда как авторизация определяет, какие действия этот пользователь может выполнять. Надёжные методы управления доступом помогают предотвратить несанкционированный доступ к критически важным данным и системам.\r\n\r\n', 'video'),
(54, 'asd.mp4', 'Реагирование на инциденты и планирование восстановления после атак', 'Даже при самых лучших мерах защиты, риск кибератак всегда остаётся. Важно иметь план реагирования на инциденты, который включает в себя обнаружение и анализ атак, меры по их нейтрализации, а также действия по восстановлению нормальной работы системы. План восстановления после атак должен предусматривать резервное копирование данных, тестирование восстановления и обучение сотрудников, чтобы минимизировать последствия и время простоя после инцидента.\r\n\r\n', 'video'),
(55, 'asd.mp4', 'Введение в управление проектами', 'Управление проектами (PM) — это процесс планирования, организации и управления ресурсами для достижения конкретных целей и задач проекта. Ключевые элементы управления проектами включают в себя определение целей, составление плана проекта, управление временем, стоимостью и качеством, а также контроль выполнения задач. Основные методологии управления проектами включают водопадную модель, Agile и Scrum.\r\n\r\n', 'video'),
(56, 'asd.mp4', 'Планирование проекта и определение целей', 'Планирование проекта начинается с определения его целей и задач, которые должны быть конкретными, измеримыми, достижимыми, релевантными и ограниченными по времени (SMART). План проекта включает в себя детализированный график, бюджет, распределение ресурсов и управление рисками. Эффективное планирование помогает избежать неопределённостей и обеспечивает успешное завершение проекта.\r\n\r\n', 'video'),
(57, 'asd.mp4', 'Управление рисками в проекте', 'Управление рисками включает в себя идентификацию, анализ и реагирование на риски, которые могут повлиять на успешное выполнение проекта. Это проактивный процесс, который помогает снизить вероятность негативных событий и минимизировать их последствия. Основные шаги управления рисками включают оценку вероятности и воздействия рисков, разработку плана реагирования и постоянный мониторинг рисков в течение всего проекта.\r\n\r\n', 'video'),
(58, 'asd.mp4', 'Командная работа и коммуникация', 'Успех проекта во многом зависит от эффективной командной работы и коммуникации. Проектный менеджер должен уметь строить и управлять командой, распределять роли и обязанности, а также обеспечивать открытые и прозрачные коммуникации. Регулярные встречи, использование инструментов для совместной работы и поддержка мотивации команды играют ключевую роль в достижении целей проекта.\r\n\r\n', 'video'),
(59, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Контроль и завершение проекта', 'Контроль выполнения проекта включает в себя мониторинг прогресса, измерение выполнения задач, управление изменениями и оценку результатов. Завершение проекта — это процесс формального завершения всех работ и получение согласия всех заинтересованных сторон на закрытие проекта. Важной частью завершения проекта является проведение анализа выполнения проекта, документирование уроков и успешных практик для будущих проектов.\r\n\r\n', 'img'),
(60, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Введение в Full Stack разработку на Java', 'Full Stack разработка на Java включает в себя создание как серверной (back-end), так и клиентской (front-end) частей приложения. Разработчик должен владеть языком Java для разработки серверной логики, а также технологиями HTML, CSS и JavaScript для создания пользовательского интерфейса. Кроме того, знание баз данных, RESTful API и DevOps-практик является обязательным.\r\n\r\n', 'img'),
(61, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Создание RESTful API с использованием Spring Boot', 'Spring Boot — это мощный фреймворк для разработки приложений на Java, который упрощает создание RESTful API. RESTful API позволяет взаимодействовать с серверной частью приложения через HTTP-запросы. Основные аспекты включают в себя создание контроллеров, сервисов и репозиториев, а также настройку маршрутизации и обработки запросов.\r\n\r\n', 'img'),
(62, 'asd.mp4', 'Работа с базами данных и ORM', 'В Full Stack разработке на Java используется ORM (Object-Relational Mapping) для работы с базами данных. Hibernate — это популярный фреймворк ORM, который позволяет легко связывать объекты Java с записями в базе данных. Теория включает в себя настройку подключения к базе данных, создание сущностей, написание запросов и управление транзакциями', 'video'),
(63, 'asd.mp4', 'Front-end разработка с использованием Angular или React', 'Для создания интерактивных пользовательских интерфейсов часто используются фреймворки Angular или React. Angular — это платформенное решение от Google, которое включает в себя всё необходимое для разработки клиентской части. React — это библиотека от Facebook, которая фокусируется на компонентном подходе и позволяет создавать динамичные интерфейсы. Оба фреймворка используют TypeScript или JavaScript для написания кода.\r\n\r\n', 'video'),
(64, 'asd.mp4', 'Интеграция front-end и back-end', 'Интеграция front-end и back-end частей приложения включает в себя обмен данными через RESTful API. На клиентской стороне используются методы HTTP (GET, POST, PUT, DELETE) для взаимодействия с сервером. Важные аспекты включают в себя настройку CORS (Cross-Origin Resource Sharing), обработку асинхронных запросов и обеспечение безопасности данных.\r\n\r\n', 'video'),
(65, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Введение в Node.js', 'Node.js — это серверная платформа на основе JavaScript, которая позволяет создавать высокопроизводительные и масштабируемые сетевые приложения. Node.js использует событийно-ориентированную модель и неблокирующий ввод-вывод (I/O), что делает его идеальным для приложений, работающих в режиме реального времени, таких как чаты и игровые серверы.\r\n\r\n', 'img'),
(66, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Работа с модулями и пакетами', 'Node.js использует систему модулей CommonJS, что позволяет организовывать код в отдельные файлы и повторно использовать их в других частях приложения. NPM (Node Package Manager) — это стандартный менеджер пакетов для Node.js, который предоставляет доступ к тысячам библиотек и инструментов. Важно уметь создавать собственные модули, устанавливать и управлять внешними пакетами.\r\n\r\n', 'img'),
(67, 'asd.mp4', 'Создание RESTful API с использованием Express.js', 'Express.js — это минималистичный фреймворк для создания веб-приложений на Node.js, который упрощает разработку RESTful API. Основные аспекты включают в себя настройку маршрутизации, обработку HTTP-запросов, работу с middleware и управление ошибками. Express.js также позволяет легко интегрировать другие библиотеки для аутентификации, валидации данных и работы с базами данных.\r\n\r\n', 'video'),
(68, 'asd.mp4', 'Работа с базами данных в Node.js', 'Node.js поддерживает работу с различными базами данных, такими как MongoDB, MySQL и PostgreSQL. Для работы с MongoDB часто используется библиотека Mongoose, которая предоставляет удобный интерфейс для выполнения CRUD операций (создание, чтение, обновление, удаление). Важные аспекты включают настройку подключения к базе данных, создание схем и моделей, а также выполнение запросов.\r\n\r\n', 'video'),
(69, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Введение в Full Stack Python', 'Full Stack Python означает использование Python как основного языка программирования как на стороне сервера (backend), так и на стороне клиента (frontend). В этом уроке вы познакомитесь с основами создания полноценных веб-приложений, используя Python для работы как с серверной, так и с клиентской стороной.', 'img'),
(70, 'asd.mp4', 'Работа с Flask в Full Stack Python', 'Flask - это легкий фреймворк для создания веб-приложений с использованием Python. В этом уроке вы изучите основные концепции Flask, обработку маршрутов, работу с шаблонами Jinja2 и создание RESTful API с использованием Flask.', 'video'),
(71, 'asd.mp4', 'Базы данных и Full Stack Python', 'Для создания полноценных веб-приложений необходимо уметь работать с базами данных. В этом уроке вы научитесь использовать Python для взаимодействия с различными типами баз данных, такими как SQLite, MySQL или PostgreSQL, а также интегрировать их в свои Full Stack проекты.\r\n', 'video'),
(72, 'asd.mp4', 'Фронтенд разработка с Python и JavaScript', 'Для создания динамических и интерактивных пользовательских интерфейсов необходимо знание не только Python, но и JavaScript. В этом уроке вы узнаете как интегрировать фронтенд разработку с использованием JavaScript в ваши Full Stack Python проекты.\r\n\r\n', 'video'),
(73, 'asd.mp4', 'Деплоймент Full Stack Python приложений', 'После того как вы создали свое веб-приложение на Full Stack Python, настало время задеплоить его, чтобы оно стало доступным для пользователей в интернете. В этом уроке вы познакомитесь с различными методами деплоя Full Stack Python приложений, такими как использование облачных сервисов, настройка веб-серверов и CI/CD практики.', 'video'),
(74, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Основы HTML и CSS в Frontend разработке', 'HTML и CSS являются основными языками для создания структуры и стилей веб-страниц. В этом уроке вы изучите основные теги HTML для создания контента, а также основы CSS для оформления страницы, создания макетов и адаптивного дизайна.\r\n\r\n', 'img'),
(75, 'asd.mp4', 'Работа с JavaScript в Frontend разработке', 'JavaScript является основным языком программирования для интерактивных элементов на веб-странице. В этом уроке вы узнаете основы JavaScript, работу с DOM, событиями, асинхронным программированием, AJAX и многое другое, что необходимо для создания динамических веб-приложений.\r\n\r\n', 'video'),
(76, 'asd.mp4', 'Основы Frontend фреймворков: React.js', 'React.js - это популярный JavaScript фреймворк для разработки пользовательских интерфейсов. В этом уроке вы познакомитесь с основами React, созданием компонентов, управлением состоянием, роутингом и другими ключевыми концепциями, необходимыми для разработки современных веб-приложений.\r\n\r\n', 'video'),
(77, 'asd.mp4', 'Верстка и адаптивный дизайн в Frontend разработке', 'Верстка и адаптивный дизайн играют важную роль в создании адаптивных и кросс-браузерных веб-страниц. В этом уроке вы узнаете о методах верстки, медиазапросах, флексбоксе, гридах и других техниках для создания адаптивных и красивых интерфейсов.\r\n\r\n', 'video'),
(78, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Оптимизация производительности в Frontend разработке', 'Производительность важна для пользовательского опыта на веб-сайтах. В этом уроке вы узнаете о методах оптимизации загрузки ресурсов, уменьшении объема кода, оптимизации изображений, кешировании данных и других приемах, чтобы сделать ваш Frontend проект быстрым и эффективным.\r\n\r\n', 'img'),
(79, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Введение в iOS и Swift программирование', 'iOS - операционная система для мобильных устройств Apple, а Swift - язык программирования, разработанный Apple для создания приложений под iOS и macOS. В этом уроке вы познакомитесь с основами iOS разработки, языком Swift, Xcode IDE и основными концепциями разработки приложений для устройств Apple.\r\n\r\n', 'img'),
(80, 'asd.mp4', 'Основы дизайна интерфейсов в iOS приложениях', 'Дизайн интерфейса играет важную роль в создании удобных и привлекательных iOS приложений. В этом уроке вы изучите основные принципы дизайна интерфейсов для iOS, использование Storyboards, Auto Layout, UIKit элементов, анимаций и других инструментов для создания красивых приложений.\r\n\r\n', 'video'),
(81, 'asd.mp4', 'Работа с базами данных и сетью в iOS приложениях', ' сохранения данных и взаимодействия с сетью в iOS приложениях используются различные технологии. В этом уроке вы узнаете о работе с Core Data для локального хранения данных, использовании URLSession для сетевых запросов, работе с REST API и других аспектах работы с данными в приложениях для iOS.\r\n\r\n', 'video'),
(82, 'img1.akspic.ru-purpur-atmosfera-svet-priroda-chernyy-1920x1080.png', 'Разработка мобильных приложений с использованием фреймворка SwiftUI', 'SwiftUI - это декларативный фреймворк для создания пользовательских интерфейсов в приложениях под iOS. В этом уроке вы изучите основы работы с SwiftUI, создание компонентов, управление состоянием, навигацией и другие ключевые концепции, необходимые для разработки современных iOS приложений.\r\n\r\n', 'img'),
(83, 'asd.mp4', 'Тестирование и отладка iOS приложений', 'Тестирование является важной частью разработки приложений для обеспечения их качества. В этом уроке вы узнаете о различных методах тестирования iOS приложений, использовании инструментов Xcode для отладки, UI тестировании, юнит-тестировании и других приемах, чтобы создать надежные iOS приложения.\r\n\r\n', 'video');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `surname` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `middleName` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `telegaLink` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `telNumber` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `idRole` int(11) NOT NULL,
  `img` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `ban` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`id`, `surname`, `name`, `middleName`, `birthday`, `telegaLink`, `telNumber`, `email`, `password`, `idRole`, `img`, `ban`) VALUES
(2, 'Админов', 'Сардор', 'Махмутжонович', '2005-07-31', 'https://t.me/AZIZ_006', '+7 (996) 336-30-58', 'admin@mail.ru', 'admin', 1, 'teacher-1 - копия.jpg', 0),
(4, 'Иванович', 'Иванов', 'student-1', '2024-04-10', 'https://t.me/AZIZ_006', '+7 (945) 554-54-35', 'student-1@mail.ru', 'student-1', 3, 'teach-6.jpg', 0),
(5, 'Пупкин', 'Герман', 'Германович', '2024-05-01', '', '65848235', 'gerp@mail.ru', '123123', 3, 'teacher-1.jpg', 1),
(6, 'Иванов', 'Иван', 'Иванович', '2024-05-17', '', '+7 (966) 577-25-43', 'ivanov@mail.ru', '123123', 3, '', 0),
(8, 'Иванов', 'Иван', 'Иванович', '0000-01-01', '', '+7 (975) 145-24-51', 'ivanov1@mail.ru', '123456', 3, '', 0),
(9, 'Суратов', 'Джавохир', 'Фарходжанович', '1976-05-09', 'https://t.me/AZIZ_006', '+7 (965) 785-32-55', 'Javohir@mail.ru', 'javohir', 2, 'teach-1.jpg', 0),
(10, 'Муминов', 'Улугбек', 'Авазбекович', '1995-03-21', 'https://t.me/AZIZ_006', '+7 (965) 478-92-58', 'ulugbek@mail.ru', 'ulugbek', 2, 'teach-2.jpg', 0),
(11, 'Акбаров', 'Зохиджон', 'Ботиржонович', '1988-05-11', 'https://t.me/AZIZ_006', '+7 (975) 321-45-68', 'zohidjon@mail.ru', 'zohidjon', 2, 'teach-3.jpg', 0),
(14, 'Каландаров', 'Махмуджон', 'Жавохирович', '1985-12-12', 'https://t.me/AZIZ_006', '+7 (951) 357-45-68', 'mahmudjon@mail.ru', 'mahmudjon', 2, 'teach-4.jpg', 0),
(15, 'Ботиров', 'Бехзод', 'Ибрагимович', '1989-05-13', 'https://t.me/AZIZ_006', '+7 (973) 125-45-86', 'begzod@mail.ru', 'begzod', 2, 'teach-5.jpg', 0),
(16, 'Очилов', 'Абдулазиз', 'Комилович', '2000-07-14', 'https://t.me/AZIZ_006', '+7 (936) 458-25-85', 'abdulaziz@mail.ru', 'abdulaziz', 2, 'teach-6.jpg', 0);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `courses`
--
ALTER TABLE `courses`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `direction`
--
ALTER TABLE `direction`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idTeacher` (`idTeacher`,`idCours`),
  ADD KEY `idCours` (`idCours`);

--
-- Индексы таблицы `feedbackFrom`
--
ALTER TABLE `feedbackFrom`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `gradeStudents`
--
ALTER TABLE `gradeStudents`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idStudent` (`idStudent`,`idLesson`),
  ADD KEY `idLesson` (`idLesson`);

--
-- Индексы таблицы `lesson`
--
ALTER TABLE `lesson`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idCours` (`idCours`,`idTheory`),
  ADD KEY `idTheory` (`idTheory`);

--
-- Индексы таблицы `personalCourses`
--
ALTER TABLE `personalCourses`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idStudent` (`idUser`,`idCours`),
  ADD KEY `idCourse` (`idCours`);

--
-- Индексы таблицы `profession`
--
ALTER TABLE `profession`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idUser` (`idUser`);

--
-- Индексы таблицы `salaryCourse`
--
ALTER TABLE `salaryCourse`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idCours` (`idCours`);

--
-- Индексы таблицы `theory`
--
ALTER TABLE `theory`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `courses`
--
ALTER TABLE `courses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- AUTO_INCREMENT для таблицы `direction`
--
ALTER TABLE `direction`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=40;

--
-- AUTO_INCREMENT для таблицы `feedbackFrom`
--
ALTER TABLE `feedbackFrom`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT для таблицы `gradeStudents`
--
ALTER TABLE `gradeStudents`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=47;

--
-- AUTO_INCREMENT для таблицы `lesson`
--
ALTER TABLE `lesson`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=46;

--
-- AUTO_INCREMENT для таблицы `personalCourses`
--
ALTER TABLE `personalCourses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `profession`
--
ALTER TABLE `profession`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT для таблицы `salaryCourse`
--
ALTER TABLE `salaryCourse`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=73;

--
-- AUTO_INCREMENT для таблицы `theory`
--
ALTER TABLE `theory`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=84;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `direction`
--
ALTER TABLE `direction`
  ADD CONSTRAINT `direction_ibfk_1` FOREIGN KEY (`idCours`) REFERENCES `courses` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `direction_ibfk_2` FOREIGN KEY (`idTeacher`) REFERENCES `user` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `gradeStudents`
--
ALTER TABLE `gradeStudents`
  ADD CONSTRAINT `gradestudents_ibfk_1` FOREIGN KEY (`idLesson`) REFERENCES `lesson` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `gradestudents_ibfk_2` FOREIGN KEY (`idStudent`) REFERENCES `user` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `lesson`
--
ALTER TABLE `lesson`
  ADD CONSTRAINT `lesson_ibfk_1` FOREIGN KEY (`idCours`) REFERENCES `courses` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `lesson_ibfk_2` FOREIGN KEY (`idTheory`) REFERENCES `theory` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `personalCourses`
--
ALTER TABLE `personalCourses`
  ADD CONSTRAINT `personalcourses_ibfk_1` FOREIGN KEY (`idUser`) REFERENCES `user` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `personalcourses_ibfk_2` FOREIGN KEY (`idCours`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `profession`
--
ALTER TABLE `profession`
  ADD CONSTRAINT `profession_ibfk_1` FOREIGN KEY (`idUser`) REFERENCES `user` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `salaryCourse`
--
ALTER TABLE `salaryCourse`
  ADD CONSTRAINT `salarycourse_ibfk_1` FOREIGN KEY (`idCours`) REFERENCES `courses` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
